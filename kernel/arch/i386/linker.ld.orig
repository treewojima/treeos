/* Virtual memory/higher half offsets */
KERNEL_PHYS_ADDR   = 0x100000;
KERNEL_VIRT_OFFSET = 0xC0000000;

/* Symbol to use as the entry point for the kernel executable */
/*_linker_start = _start - KERNEL_VIRT_OFFSET;*/
ENTRY(_start);

/* Tell where the various sections of the object files will be put in the final
 * kernel image */
SECTIONS
{
    . = KERNEL_PHYS_ADDR;

    /* Multiboot header and bootstrap .text */
    .boot :
    {
        *(.multiboot)
        */boot.o(.text)
    }

    /* Skip ahead to higher half address */
    . = ALIGN(0x1000);
    . += KERNEL_VIRT_OFFSET;
    g_kernel_start = . ;

    /* Multiboot header and .text */
    .text ALIGN(0x1000) : AT(ADDR(.text) - KERNEL_VIRT_OFFSET)
    {
        *(EXCLUDE_FILE(*/boot.o) .text)
    }

    /* Read-only data */
    .rodata ALIGN(0x1000) : AT(ADDR(.rodata) - KERNEL_VIRT_OFFSET)
    {
        *(.rodata)
    }

    /* Read-write data (initialized) */
    .data ALIGN(0x1000) : AT(ADDR(.data) - KERNEL_VIRT_OFFSET)
    {
        *(.data)
    }

    /* Read-write data (uninitialized) and stack */
    /*.bss BLOCK(0x1000) : ALIGN(0x1000)*/
    .bss ALIGN(0x1000) : AT(ADDR(.bss) - KERNEL_VIRT_OFFSET)
    {
        g_bss_start = . ;
        
        *(COMMON)
        *(.bss)
        *(.bootstrap_stack)

        /* Align/pad to the nearest 4K page boundary */
        . = ALIGN(0x1000);
        g_bss_end = . ;
    }

    /* Page alignment is guaranteed for this symbol */
    g_kernel_end = . ;
}
